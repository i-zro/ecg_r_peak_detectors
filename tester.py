from multiprocessing.dummy import freeze_support
from multiprocessing import Pool
from timer import timer
import wfdb
import numpy as np
import detectors
import json
from os import listdir
from os.path import isfile, join

FILES_TO_SKIP = []
SAMPLES_PER_SECOND = 360

FILES = list({f.split('.')[0] for f in listdir('./db') if isfile(join('./db', f))} - set(FILES_TO_SKIP) - {'.'})

DETECTION_X_RANGE2 = 58
R_SYMBOLS = ['N', 'V', 'L', 'R', '/', 'f', 'A', 'E', 'Q', 'F', 'j', 'J', 'a', 'S', 'e']
# get rid of '!' fragments
FILES_FRAGMENTS = {'207': [('00:00:00.000', '00:00:41.000'),
                           ('00:00:52.000', '00:00:54.600'),
                           ('00:01:01.000', '00:04:02.000'),
                           ('00:04:07.000', '00:04:08.000'),
                           ('00:04:22.000', '00:04:29.500'),
                           ('00:04:41.500', '00:25:40.700'),
                           ('00:27:20.000', '00:31:00.000')]}

BREAKS_EXACT = {
    '232': [(1539, 1606), (2695, 2776), (3605, 3614), (4448, 4458), (5290, 5288), (6394, 6429), (8794, 8888),
            (9480, 9837), (11335, 11409), (14857, 15264), (16764, 16865), (18223, 18350), (20706, 21075),
            (22605, 22673), (23769, 23834), (25179, 25299), (25891, 26047), (26639, 26757), (29913, 29956),
            (32333, 32425), (35364, 35458), (36823, 36918), (38025, 38140), (39500, 39614), (40706, 40820),
            (41922, 42015), (43116, 43196), (44305, 44388), (46257, 46341), (49546, 49818), (51937, 51953),
            (53063, 53127), (54231, 54307), (55402, 55497), (56601, 56694), (58566, 58885), (60498, 60585),
            (62482, 62573), (63411, 63441), (64271, 64276), (65113, 65116), (66211, 66270), (67366, 67410),
            (68511, 68557), (69384, 69388), (70483, 70533), (71893, 71949), (72784, 72810), (74402, 74463),
            (75055, 75159), (76255, 76335), (77427, 77509), (78599, 78674), (80536, 80638), (85140, 85123),
            (86764, 87182), (90329, 90461), (91572, 91678), (92521, 92557), (94185, 94209), (95328, 95429),
            (97325, 97447), (98288, 98353), (99988, 100021), (101122, 101209), (102563, 102928), (104441, 104542),
            (105634, 105760), (108700, 108789), (110926, 111016), (112914, 113323), (114661, 114672), (117326, 117402),
            (118237, 118277), (119388, 119448), (121329, 121402), (123034, 123037), (124643, 124628), (126243, 126360),
            (127464, 127572), (128164, 128494), (131419, 131821), (133906, 133915), (135027, 135116), (137264, 137644),
            (140268, 140258), (142697, 143130), (144907, 145006), (146118, 146178), (149405, 149503), (150605, 150730),
            (152634, 152976), (154521, 154599), (156236, 156311), (157422, 157492), (161483, 161639), (163264, 163304),
            (165478, 165530), (166908, 167295), (168878, 168950), (170070, 170140), (171511, 171536), (172898, 173030),
            (174930, 175040), (177181, 177249), (178334, 178398), (181055, 181168), (183580, 183583), (185217, 185276),
            (186382, 186498), (187335, 187382), (189544, 189499), (190612, 190698), (191537, 191561), (194749, 194822),
            (195929, 196041), (197670, 197720), (199365, 199435), (200804, 200753), (202646, 202825), (204736, 204853),
            (205962, 206079), (207716, 207798), (209176, 209145), (210514, 210611), (213868, 214003), (215666, 215738),
            (217136, 217111), (218766, 218729), (220385, 220475), (221870, 221847), (224051, 224208), (225337, 225433),
            (226546, 226644), (227741, 227832), (229467, 229985), (232969, 233489), (235096, 235190), (236840, 236883),
            (239881, 239941), (241593, 241640), (244122, 244208), (254332, 254330), (255170, 255147), (257321, 257366),
            (261162, 261217), (262316, 262365), (263742, 263807), (265968, 266027), (267133, 267163), (268005, 268054),
            (269162, 269230), (270326, 270398), (272026, 272145), (274818, 274911), (276025, 276092), (277466, 277647),
            (278754, 278813), (279910, 279978), (281086, 281171), (282552, 282643), (283751, 283817), (284910, 284998),
            (286101, 286177), (290471, 290562), (292218, 292297), (293411, 293550), (294665, 294787), (295901, 295998),
            (297104, 297190), (298567, 298787), (299899, 299989), (301099, 301182), (302540, 302599), (303705, 303785),
            (304884, 304998), (306627, 306693), (310138, 310223), (311067, 311140), (312252, 312358), (314514, 314653),
            (315245, 315631), (317903, 318007), (319365, 319669), (323119, 323664), (326289, 326327), (327427, 327531),
            (328914, 329290), (331972, 332059), (333169, 333268), (335167, 335239), (337422, 337417), (338787, 339159),
            (340690, 340794), (343509, 344430), (347331, 347853), (349409, 349522), (352254, 352447), (353039, 353923),
            (357599, 358189), (359747, 359811), (361964, 362005), (363656, 363824), (366522, 366971), (369837, 370111),
            (370703, 371084), (374766, 374827), (376204, 376295), (379020, 380542), (384502, 384906), (388158, 388284),
            (390179, 390289), (391397, 391492), (393675, 394002), (394594, 394958), (397007, 398003), (401427, 401626),
            (402218, 402629), (405761, 405846), (407748, 408409), (412370, 412756), (413348, 413482), (415920, 416077),
            (416669, 417523), (421494, 421899), (425083, 425564), (428182, 428751), (432197, 432735), (433327, 433312),
            (436317, 436805), (437397, 437347), (440619, 440663), (441778, 441860), (444318, 444480), (445072, 445972),
            (448615, 448795), (450841, 452271), (455959, 456300), (459964, 460492), (461084, 461315), (461907, 462251),
            (462843, 463153), (466329, 467313), (470915, 471022), (471614, 471570), (473731, 474633), (479019, 480028),
            (483104, 483225), (484596, 484649), (485766, 485854), (488286, 488458), (489050, 489955), (493340, 493805),
            (494397, 494712), (495304, 495610), (499320, 499420), (500012, 500348), (505389, 505659), (506251, 507098),
            (510984, 512442), (515533, 515995), (516587, 516833), (517425, 517757), (518349, 518663), (519255, 519563),
            (523485, 523594), (527834, 528005), (532255, 532288), (533945, 534903), (538609, 539119), (541731, 542126),
            (542718, 542697), (545653, 545797), (546389, 546784), (551336, 551892), (555590, 555950), (560300, 560806),
            (564810, 564916), (569574, 569870), (570462, 570421), (572644, 573329), (573921, 573933), (576956, 577477),
            (581517, 581892), (584483, 584593), (585185, 585598), (588175, 588389), (592181, 592468), (593060, 593013),
            (596574, 597145), (597737, 598111), (602694, 602983), (605644, 605727), (606319, 606658), (610576, 610624),
            (612289, 613299), (615158, 615291), (615883, 616196), (616788, 617066), (617658, 617910), (618502, 618748),
            (619340, 619581), (623780, 623833), (628884, 628995), (629587, 629919), (633377, 633511), (634103, 634566),
            (638530, 638887), (642680, 643207), (643799, 643780), (647057, 647106), (648767, 648792)],
    '103': [],
    '112': [],
    '202': [(10885, 10847), (82647, 82600), (96364, 96346), (120955, 120953), (156176, 156147), (275982, 275964),
            (465782, 465765), (467017, 467012), (468582, 468552)],
    '220': [],
    '121': [],
    '100': [],
    '113': [],
    '209': [],
    '117': [],
    '116': [],
    '123': [(58301, 58251), (125282, 125231), (210466, 210419), (602221, 602177)],
    '214': [(107289, 107253), (124069, 124019)],
    '228': [(20696, 20696), (130781, 130773), (402947, 402913), (468493, 468505), (472490, 472444), (515857, 515844)],
    '106': [(589755, 589704)],
    '230': [],
    '222': [],
    '234': [],
    '223': [],
    '207': [(4631, 4584), (15061, 18772), (20118, 22064), (87578, 89078), (89670, 94384), (96839, 96852),
            (97444, 101370), (555116, 590532), (591124, 591352), (591944, 592255), (613008, 612963), (614289, 614240)],
    '210': [],
    '115': [],
    '118': [(69360, 69322), (300119, 300092), (366614, 366581), (410020, 409969), (480344, 480314)],
    '233': [],
    '124': [(296691, 296668), (376464, 376426), (377702, 377657), (380156, 380132), (384115, 384082)],
    '212': [],
    '217': [],
    '213': [],
    '203': [(199689, 199763)],
    '104': [],
    '107': [],
    '108': [(11415, 11400), (180580, 180568), (194092, 194080), (206270, 206252), (268470, 268457), (306661, 306624),
            (327119, 327108), (413496, 413459), (426987, 427011), (431491, 431441), (435632, 435604), (491336, 491285)],
    '201': [(120413, 120373), (136630, 137376), (137968, 138114), (139240, 139240), (140230, 140202), (154947, 154901),
            (156174, 156232), (159103, 159229), (159821, 159898), (160490, 160556), (161148, 161238), (166854, 166922),
            (185294, 185277), (185869, 185985), (186916, 187048), (187862, 187931), (190543, 190616), (191208, 191317),
            (191909, 192013), (192605, 192663), (193255, 193349), (193941, 194039), (194631, 194688), (195280, 195368),
            (195960, 196084), (196676, 196748), (198894, 198981), (200301, 200277), (211764, 211713), (217850, 217816),
            (219614, 219607), (232846, 232805), (236938, 236892), (256301, 256281), (276427, 276388), (277409, 277492),
            (286093, 286045), (287827, 287781), (299516, 299474), (319411, 319366), (341126, 341094), (402895, 403024),
            (406165, 406123), (407449, 407561), (462608, 462668), (528345, 528497), (530494, 530642), (533394, 533501),
            (536914, 537081), (539267, 539230), (539822, 539948), (541442, 541392), (543683, 543640), (544232, 544348),
            (545114, 545079), (545863, 545836), (547140, 547242), (550229, 550210), (550802, 550919), (551679, 551646),
            (552238, 552390), (555678, 555789), (556568, 556524), (557116, 557225), (561248, 561380), (564801, 564752),
            (565344, 565512), (566783, 566931), (567704, 567655), (568247, 568343), (568935, 569041), (570368, 570440),
            (571555, 571531), (573589, 573748), (643775, 644541), (645133, 645124), (645716, 645749), (647229, 647196),
            (647788, 647912), (649643, 649747)],
    '122': [],
    '231': [(2372, 2407), (34565, 34599), (35515, 35534), (36126, 36155), (36747, 36787), (37379, 37391),
            (37983, 38003), (38595, 38601), (39193, 39211), (39803, 39810), (40402, 40405), (40997, 41006),
            (41598, 41595), (42187, 42168), (42760, 42735), (43327, 43304), (43896, 43884), (44476, 44473),
            (45065, 45060), (45652, 45639), (46231, 46203), (46795, 46764), (47356, 47345), (47937, 47956),
            (48548, 48545), (49137, 49131), (49723, 49729), (50321, 50319), (50911, 50917), (51509, 51506),
            (52098, 52090), (119495, 119533), (120459, 120475), (121067, 121105), (121697, 121739), (122331, 122346),
            (122938, 122975), (123567, 123564), (124156, 124159), (124751, 124743), (125335, 125337), (125929, 125930),
            (126522, 126518), (127110, 127116), (127708, 127707), (128299, 128304), (128896, 128884), (129476, 129481),
            (130073, 130089), (130681, 130688), (131280, 131280), (131872, 131864), (132456, 132451), (133043, 133045),
            (133637, 133657), (134249, 134275), (134867, 134907), (135499, 135535), (136127, 136143), (136735, 136736),
            (137328, 137327), (137919, 137905), (138497, 138493), (139085, 139082), (139674, 139673), (140265, 140271),
            (140863, 140858), (141450, 141444), (142036, 142023), (142615, 142597), (143189, 143159), (143751, 143732),
            (144324, 144324), (144916, 144909), (145501, 145500), (146092, 146101), (146693, 146686), (147278, 147275),
            (147867, 147894), (148486, 148488), (149080, 149103), (149695, 149697), (150289, 150275), (150867, 150869),
            (151461, 151455), (152047, 152075), (152667, 152669), (153261, 153282), (153874, 153894), (154486, 154482),
            (155074, 155086), (155678, 155662), (156254, 156237), (156829, 156816), (157408, 157402), (157994, 158002),
            (158594, 158577), (159169, 159159), (159751, 159726), (160318, 160312), (160904, 160906), (161498, 161481),
            (162073, 162079), (162671, 162651), (163243, 163248), (163840, 163838), (164430, 164437), (165029, 165058),
            (165650, 165670), (166262, 166268), (166860, 166888), (167480, 167500), (168092, 168116), (168708, 168729),
            (169321, 169371), (169963, 170001), (170593, 170625), (171217, 171270), (171862, 171883), (172475, 172477),
            (173069, 173076), (173668, 173669), (174261, 174276), (174868, 174884), (175476, 175490), (176082, 176097),
            (176689, 176684), (177276, 177268), (177860, 177865), (178457, 178453), (179045, 179061), (179653, 179655),
            (180247, 180238), (180830, 180834), (181426, 181428), (182020, 182059), (182651, 182667), (183259, 183291),
            (183883, 183893), (184485, 184504), (185096, 185113), (185705, 185739), (186331, 186332), (186924, 186957),
            (187549, 187577), (188169, 188193), (188785, 188802), (189394, 189384), (189976, 189985), (190577, 190584),
            (191176, 191190), (191782, 191807), (192399, 192387), (192979, 192990), (193582, 193567), (194159, 194174),
            (194766, 194747), (195339, 195332), (195924, 195906), (196498, 196489), (197081, 197088), (197680, 197695),
            (198287, 198295), (198887, 198885), (199477, 199476), (200068, 200064), (200656, 200635), (201227, 201210),
            (201802, 201824), (202416, 202413), (257097, 257149), (288305, 288328), (288920, 288945), (289537, 289581),
            (290173, 290195), (290787, 290829), (291421, 291433), (292025, 292025), (292617, 292601), (293193, 293175),
            (293767, 293762), (294354, 294331), (294923, 294934), (295526, 295522), (296114, 296104), (296696, 296687),
            (297279, 297267), (297859, 297862), (298454, 298464), (299056, 299052), (299644, 299642), (300234, 300215),
            (300807, 300786), (301378, 301364), (301956, 301935), (302527, 302538), (303130, 303126), (303718, 303763),
            (304355, 304373), (304965, 304983), (305575, 305583), (306175, 306162), (306754, 306762), (307354, 307342),
            (307934, 307931), (308523, 308516), (309108, 309121), (309713, 309743), (310335, 310331), (310923, 310949),
            (311541, 311559), (312151, 312176), (312768, 312788), (313380, 313407), (313999, 314014), (314606, 314613),
            (315205, 315185), (315777, 315782), (316374, 316376), (316968, 316980), (317572, 317587), (318179, 318199),
            (318791, 318811), (319403, 319408), (320000, 320001), (320593, 320614), (321206, 321232), (321824, 321831),
            (322423, 322437), (323029, 323034), (323626, 323660), (324252, 324274), (324866, 324884), (325476, 325503),
            (326095, 326090), (326682, 326693), (327285, 327288), (327880, 327885), (328477, 328488), (329080, 329079),
            (329671, 329691), (330283, 330288), (330880, 330889), (331481, 331502), (332094, 332101), (332693, 332696),
            (333288, 333298), (333890, 333879), (334471, 334479), (335071, 335063), (335655, 335684), (336276, 336283),
            (336875, 336890), (337482, 337518), (338110, 338119), (338711, 338744), (339336, 339351), (339943, 339962),
            (340554, 340561), (341153, 341143), (341735, 341734), (342326, 342335), (342927, 342938), (343530, 343566),
            (344158, 344162), (344754, 344777), (345369, 345378), (345970, 345967), (346559, 346553), (347145, 347157),
            (347749, 347764), (348356, 348367), (348959, 348972), (349564, 349578), (350170, 350191), (350783, 350779),
            (351371, 351377), (351969, 351952), (352544, 352532), (353124, 353121), (353713, 353705), (354297, 354307),
            (354899, 354887), (355479, 355496), (356088, 356073), (356665, 356655), (357247, 357246), (357838, 357827),
            (358419, 358436), (359028, 359036), (359628, 359667), (360259, 360287), (360879, 360912), (361504, 361530),
            (362122, 362119), (362711, 362709), (363301, 363303), (363895, 363907), (364499, 364500), (365092, 365106),
            (365698, 365698), (366290, 366299), (366891, 366895), (367487, 367489), (368081, 368092), (368684, 368699),
            (369291, 369308), (369900, 369915), (370507, 370534), (371126, 371175), (371767, 371785), (372377, 372390),
            (372982, 372970), (373562, 373556), (374148, 374156), (374748, 374771), (375363, 375406), (375998, 376011),
            (434231, 434234), (434826, 434841), (435433, 435422), (436014, 436016), (436608, 436613), (437205, 437209),
            (437801, 437824), (438416, 438431), (439023, 439030), (439622, 439636), (440228, 440222), (440814, 440847),
            (441439, 441428), (442020, 442042), (442634, 442636), (443228, 443227), (443819, 443817), (444409, 444385),
            (444977, 444967), (445559, 445550), (446142, 446134), (446726, 446717), (447309, 447296), (447888, 447905),
            (448497, 448530), (459184, 459183), (459775, 459777), (460369, 460364), (460956, 460949), (461541, 461542),
            (462134, 462123), (462715, 462709), (463301, 463301), (463893, 463903), (464495, 464510), (465102, 465111),
            (465703, 465721), (466313, 466319), (466911, 466888), (467480, 467467), (468059, 468053), (468645, 468656),
            (469248, 469270), (469862, 469890), (470482, 470539), (471131, 471154), (471746, 471785), (472377, 472393),
            (472985, 472990), (473582, 473582), (474174, 474169), (474761, 474755), (475347, 475361), (475953, 475953),
            (476545, 476558), (477150, 477155), (477747, 477748), (478340, 478358), (478950, 478959), (479551, 479577),
            (480169, 480184), (480776, 480796), (481388, 481433), (482025, 482033), (482625, 482657), (483249, 483256),
            (483848, 483875), (484467, 484481), (485073, 485086), (485678, 485686), (486278, 486288), (486880, 486867),
            (487459, 487455), (488047, 488036), (488628, 488620), (489212, 489233), (489825, 489852), (490444, 490469),
            (491061, 491087), (491679, 491705), (492297, 492324), (492916, 492934), (493526, 493541), (494133, 494160),
            (494752, 494767), (495359, 495361), (495953, 495959), (496551, 496540), (497132, 497150), (497742, 497751),
            (498343, 498384), (498976, 499011), (499603, 499632), (500224, 500258), (500850, 500841), (501433, 501452),
            (502044, 502046), (502638, 502636), (503228, 503227), (503819, 503819), (504411, 504416), (505008, 505033),
            (505625, 505649), (506241, 506268), (506860, 506901), (507493, 507524), (578892, 578934), (633161, 633198),
            (646706, 646748)],
    '105': [],
    '111': [],
    '101': [(115601, 115689)],
    '102': [],
    '205': [],
    '221': [(109480, 109520), (392708, 392668), (448360, 448328), (468271, 468245), (502559, 502518), (517607, 517556)],
    '208': [(458034, 458568)],
    '215': [],
    '119': [],
    '219': [(108950, 109287), (117082, 117067), (183742, 183744), (300620, 300950), (302480, 302444), (304303, 304330),
            (321798, 321781), (322702, 322675), (323587, 323553), (324446, 324417), (325300, 325252), (331307, 331274),
            (332181, 332135), (333024, 332981), (333862, 333830), (335540, 335489), (336374, 336330), (338878, 338831),
            (340270, 340274), (341177, 341148), (345352, 345301), (346570, 346532), (347421, 347372), (348786, 348755),
            (351822, 351779), (353487, 353436), (359806, 359760), (360880, 360829), (363576, 363538), (364939, 364895),
            (366036, 365989), (369021, 368977), (373091, 373052), (376212, 376176), (376768, 376735), (377327, 377282),
            (384056, 384020), (387909, 387880), (388472, 388421), (391915, 391884), (392476, 392428), (393020, 392988),
            (395244, 395212), (400843, 400794), (401386, 401338), (413287, 413244), (417928, 417910), (418502, 418469),
            (420918, 420903), (421495, 421468), (422060, 422016), (422608, 422570), (426975, 426931), (427523, 427492),
            (428084, 428038), (428630, 428595), (429729, 429684), (433010, 432989), (433581, 433564), (437081, 437056),
            (437648, 437599), (480543, 481059), (484203, 484158), (485943, 485925), (487647, 487606), (488487, 488441),
            (490158, 490115), (492655, 492605), (493197, 493164), (497055, 497015), (498726, 498702), (499294, 499254),
            (499846, 499816), (500408, 500364)],
    '200': [],
    '114': [(31304, 31296), (46145, 46148), (70137, 70103), (81049, 81060), (89886, 89856), (91459, 91411),
            (95408, 95365), (106053, 106022), (108042, 107994), (109944, 109904), (122787, 122765), (146094, 146083),
            (148058, 148049), (160793, 160794), (164884, 164870), (177611, 177580), (179631, 179584), (186564, 186541),
            (193908, 193863), (203662, 203618), (205575, 205543)],
    '109': []}

REF_SAMPLES = [7]
THRESHOLDS = [0.054]

def get_r_samples(ann):
    return list(filter(lambda x: x[1] in R_SYMBOLS, zip(ann.sample, ann.symbol)))

def get_r_peaks_from(anno):
    return get_r_samples(anno)


# @timer
def get_found_r_peaks(record_signal_ch0, weight, threshold):
    # return main.find_R_peaks(record_signal_ch0)
    return main.find_R_peaks_weights2(record_signal_ch0, weight, threshold)

def calculate_stats_for_tests_bitmap2(annotated_x, detected_x):
    t_pos = 0
    print('annotated:', len(annotated_x), '/ detected:', len(detected_x))

    if len(annotated_x) > 0:
        bitmap_len = annotated_x[len(annotated_x) - 1] + DETECTION_X_RANGE2
        anno_bitmap = np.zeros(bitmap_len)
        det_bitmap = np.zeros(bitmap_len)
        for x in annotated_x:
            for i in range(0, DETECTION_X_RANGE2):
                if x - i > 0:
                    anno_bitmap[x - i] = 1
                anno_bitmap[x + i] = 1
        for x in detected_x:
            if x < bitmap_len:
                det_bitmap[x] = 1

        t_pos = 0
        f_pos = 0
        for i in range(0, bitmap_len):
            if det_bitmap[i]:
                if anno_bitmap[i]:
                    t_pos += 1
                else:
                    f_pos += 1

        f_neg = max(0, len(annotated_x) - t_pos)
    else:
        t_pos = 0
        f_neg = 0
        f_pos = len(detected_x)
    print('t_pos:', t_pos, 'f_pos:', f_pos, 'f_neg: ', f_neg)
    # print('false positives:')
    # for i in range(0, bitmap_len):
    #     if det_bitmap[i] == 1:
    #         print(tests.sample_to_time(i) + ', orig: ' + str(i))
    return t_pos, f_pos, f_neg


# @timer
def calculate_stats_for_tests_bitmap(anno_r_peaks_x, found_r_peaks_x):
    return calculate_stats_for_tests_bitmap2(anno_r_peaks_x, found_r_peaks_x)


# def test_detection(file_number, record_signal_ch0, anno_r_peaks_x, weight, threshold):
def test_detection(file_number, record_signal_ch0, anno_r_peaks_x, ref_samples, threshold):
    # found_r_peaks = get_found_r_peaks(record_signal_ch0, weight, threshold)
    found_r_peaks = detectors.ff_my(record_signal_ch0)
    # found_r_peaks = main.pan_tompkins_detector(record_signal_ch0)
    # found_r_peaks = main.find_R_peaks_freshest(record_signal_ch0, threshold, weight)
    # found_r_peaks = main.find_R_peaks(record_signal_ch0, ref_samples, threshold)

    found_r_peaks = filter_r_peaks(found_r_peaks, file_number)
    found_r_peaks_x = list(map(lambda x: x[0], found_r_peaks))
    # print('found_r_peaks_x: ', found_r_peaks_x)
    # print('anno_r_peaks_x: ', anno_r_peaks_x)
    t_pos, f_pos, f_neg = calculate_stats_for_tests_bitmap(anno_r_peaks_x, found_r_peaks_x)
    return t_pos, f_pos, f_neg


def filter_r_peaks(real_r_peaks, filenumber):
    # if filenumber not in list(FILES_FRAGMENTS.keys()):
    #     return real_r_peaks
    filtered_r_peaks = []
    for peak in real_r_peaks:
        if is_peak(peak[0], filenumber):
            filtered_r_peaks.append(peak)
    return filtered_r_peaks


def is_peak(x, filenumber):
    # return is_in_some_fragment(x, FILES_FRAGMENTS[filenumber])
    return is_out_of_fragment(x, BREAKS_EXACT[filenumber])


def is_in_some_fragment(x, ranges):
    for range in ranges:
        start_sample = convert_time_to_sample(range[0])
        end_sample = convert_time_to_sample(range[1])
        if start_sample <= x <= end_sample:
            return True
    return False


def is_out_of_fragment(x, ranges):
    for range in ranges:
        if range[0] <= x <= range[1]:
            return False
    return True


def sample_to_time(sample):
    return str(hour_of_sample(sample)).zfill(2) + ':' + \
           str(min_of_sample(sample)).zfill(2) + ':' + \
           str(sec_of_sample(sample)).zfill(2) + '.' + \
           str(msec_of_sample(sample)).zfill(3)


def hour_of_sample(sample):
    return int(sample / (SAMPLES_PER_SECOND * 3600))


def min_of_sample(sample):
    return int((sample % (SAMPLES_PER_SECOND * 3600)) / (SAMPLES_PER_SECOND * 60))


def sec_of_sample(sample):
    return int((sample % (SAMPLES_PER_SECOND * 60)) / (SAMPLES_PER_SECOND))


def msec_of_sample(sample):
    return int((sample % (SAMPLES_PER_SECOND)) / SAMPLES_PER_SECOND * 1000)


def convert_time_to_sample(time):
    hour = get_hour(time)
    min = get_min(time)
    sec = get_sec(time)
    msec = get_msec(time)
    return SAMPLES_PER_SECOND * (3600 * hour + 60 * min + sec + (msec / 1000))


def get_hour(time):
    return int(time[0:2])


def get_min(time):
    return int(time[3:5])


def get_sec(time):
    return int(time[6:8])


def get_msec(time):
    return int(time[9:12])


def create_stats(filename, annotaion_count, ref_samples, threshold, t_pos, f_pos, f_neg):
    return {
        'filename': filename,
        'annotation_count': annotaion_count,
        'ref_samples': ref_samples,
        'threshold': threshold,
        'true_positive': t_pos,
        'false_positive': f_pos,
        'false_negative': f_neg
    }


# def create_stats(filename, annotaion_count, weight, threshold, t_pos, f_pos, f_neg):
#     return {
#         'filename': filename,
#         'annotation_count': annotaion_count,
#         'weight': weight,
#         'threshold': threshold,
#         'true_positive': t_pos,
#         'false_positive': f_pos,
#         'false_negative': f_neg
#     }

def test_file(file):
    filename = 'db/' + file
    record = wfdb.rdrecord(filename)
    record_signal_ch0 = list(map(lambda x: x[0], record.p_signal))

    anno = wfdb.rdann(filename, 'atr')
    anno_r_peaks = get_r_peaks_from(anno)
    anno_r_peaks = filter_r_peaks(anno_r_peaks, file)
    anno_r_peaks_x = list(map(lambda x: x[0], anno_r_peaks))
    annotation_count = len(anno_r_peaks)

    file_stats = []
    for ref_samples in REF_SAMPLES:
        for threshold in THRESHOLDS:
            #         print('weight: ' + str(weight) + ', threshold:' + str(threshold))
            # print('ref_samples: ' + str(ref_samples) + ', threshold:' + str(threshold))
            # t_pos, f_pos, f_neg = test_detection(file, record_signal_ch0, anno_r_peaks_x, weight, threshold)
            t_pos, f_pos, f_neg = test_detection(file, record_signal_ch0, anno_r_peaks_x, 0, 0)
            # file_stats.append(create_stats(file, annotation_count, weight, threshold, t_pos, f_pos, f_neg))
            file_stats.append(create_stats(file, annotation_count, 0, 0, t_pos, f_pos, f_neg))

    return file_stats


@timer
def test_all_single_thr():
    stats = []
    for file in FILES:
        stats.append(test_file(file))

    return stats


@timer
def test_all_multi_thr():
    res = []
    with Pool(16) as p:
        res = p.map(test_file, FILES)

    return [itm for sublist in res for itm in sublist]  # flatten


if __name__ == '__main__':
    res = test_all_multi_thr()

    f = open('tmp.json', 'w')
    f.write(json.dumps(res))
    f.close()
